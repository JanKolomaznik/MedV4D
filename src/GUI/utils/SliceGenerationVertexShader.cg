void main(
	int2 			Vin : POSITION,

	uniform float3 		vecTranslate,
	uniform float		dPlaneStart,

	uniform int 		frontIdx,
	uniform float3		vecView,
	uniform float4x4	matModelViewProj,
	
	uniform float 		dPlaneIncr,
	uniform int		nSequence[64],
	uniform float3		vecVertices[8],
	uniform int		v1[24],
	uniform int		v2[24],

	out float4 		VertexOut : POSITION,
	out float3 		texCoord : TEXCOORD0,
	out float3 		position : TEXCOORD1
)
{

	float dPlane = dPlaneStart + Vin.y * dPlaneIncr;

	int idxOffset = frontIdx * 8;
	
	float3 position;

	for( int e = 0; e < 4; ++e ) {
		int vidx1 = nSequence[idxOffset + v1[Vin.x * 4 + e]];
		int vidx2 = nSequence[idxOffset + v2[Vin.x * 4 + e]];

		float3 vecV1 = vecVertices[vidx1];
		float3 vecV2 = vecVertices[vidx2];
		float3 vecStart = vecV1 + vecTranslate;
		float3 vecDir = vecV2 - vecV1;
		float denom = dot(vecDir, vecView);
		float lambda = (denom!=0.0) ? (dPlane - dot(vecStart, vecView))/denom : -1.0;
		if((lambda >= 0.0) && (lambda <= 1.0)) {
			position = vecStart + lambda * vecDir;
			break;
		}
	}

	VertexOut = mul(matModelViewProj, float4( Position, 1.0 ));
	TexCoordOut = 0.5 * (Position) + 0.5;
	return;
}
