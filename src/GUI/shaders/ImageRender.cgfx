
struct FragmentOutput
{
	float4 color : COLOR;
};

sampler3D gImageData3D = sampler_state { MinFilter = Nearest; MaxFilter = Nearest; };
//sampler3D gImageData3D = sampler_state { MinFilter = Linear; MaxFilter = Linear; };
int3 gImageDataResolution3D = {0, 0, 0};
float2 gWLWindow = { 0.08f, 0.001f };
float2 gMappedIntervalBands;


sampler3D gMaskData3D;
sampler1D gColorMap;
float gMaskAlpha;


FragmentOutput fp_WLWindow3D( 
		float3 aTexCoord : TEXCOORD0, 
		uniform sampler3D aTextureData : TEX0, 
		uniform float2 aWLWindow )
{
	FragmentOutput OUT;

	float lowBand = aWLWindow.y - (aWLWindow.x * 0.5f);
	float highBand = aWLWindow.y + (aWLWindow.x * 0.5f);
	float multiplier = 1.0f / aWLWindow.x;

	float3 coordinates = aTexCoord;
	//Disable interpolation
	//coordinates.x = round( coordinates.x * gImageDataResolution3D.x ) / gImageDataResolution3D.x;
	//coordinates.y = round( coordinates.y * gImageDataResolution3D.y ) / gImageDataResolution3D.y;
	float value = ( tex3D( aTextureData, coordinates ).x - lowBand ) * multiplier;
		
	OUT.color = float4( value.xxx, 1.0f );

	return OUT;
}

FragmentOutput fp_ColorMappedMask3D( 
		float3 aTexCoord : TEXCOORD0, 
		uniform sampler3D aMaskData : TEX0, 
		uniform sampler1D aColorMap : TEX1, 
		uniform float aMaskAlpha )
{
	FragmentOutput OUT;


	return OUT;
}


technique WLWindow3D {
	pass t0 {
		FragmentProgram = compile fp40 fp_WLWindow3D( gImageData3D, gWLWindow / (gMappedIntervalBands[1] - gMappedIntervalBands[0]) );
	}
}

technique ColorMappedMask3D {
	pass t0 {
		FragmentProgram = compile fp40 fp_ColorMappedMask3D( gMaskData3D, gColorMap, gMaskAlpha );
	}
}
