#include "DataStructures.inc"

float3 gPlaneNormal;
float3 gPlanePoint;
float gPlaneWidth;

ViewSetup gViewSetup;

struct SVertexOutput
{
	float4 tposition : POSITION;
	float4 color    : COLOR0;
	float3 position : TEXCOORD0;
};

SVertexOutput
vp_vertexPassThru
	(
		float4 position  : POSITION,
		float4 color     : COLOR0
	)
{
	SVertexOutput result;
	result.position = mul( gModelMatrix, position ).xyz;
	result.color    = color;
	result.tposition = mul( gModelViewProj, position );
	return result;
}

VertexOutput
vp_VertexPassPosTransformed(
		float4 position  : POSITION,
		float4 color     : COLOR0,
		float3 texCoord  : TEXCOORD0
	)
{
	VertexOutput result;
	result.position = mul(position, gViewSetup.modelViewProj );
	result.color    = color;
	result.texCoord = texCoord;
	return result;
}


VertexOutput
vp_VertexPassTransformed(
		float4 position  : POSITION
	)
{
	VertexOutput result;
	result.position = mul(position, gViewSetup.modelViewProj );
	result.color    = float4( 1.0f, 0.0f, 0.0f, 1.0f );
	result.texCoord = position.xyz;
	return result;
}


FragmentOutput
fp_sliceGeometry(
		float4 color    : COLOR0,
		float3 position : TEXCOORD0,
		uniform float3 aPlaneNormal,
		uniform float3 aPlanePoint,
		uniform float aPlaneWidth
		)
{
	FragmentOutput output;

	float dst = abs(dot(aPlaneNormal, (aPlanePoint - position)));
	if ( dst < aPlaneWidth ) {
		output.color.xyz = color;
	} else if ( dst < 3*aPlaneWidth ) {
		output.color.xyz = float4( 0.4f, 0.4f, 0.4f, 0.4f * dst/(3*aPlaneWidth));//color;
	} else {
		discard;
	}
	output.color.w = 1.0f;
	return output;
}

technique SceneSlicing  {
	pass t0 {
		VertexProgram = compile glslv vp_VertexPassTransformed();
		FragmentProgram = compile glslf fp_sliceGeometry(
						gPlaneNormal,
						gPlanePoint,
						gPlaneWidth);

		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = false;
		BlendEnable = true;
		BlendFunc = int2( SrcAlpha, OneMinusSrcAlpha );
		DepthFunc = LEqual;
	}
}