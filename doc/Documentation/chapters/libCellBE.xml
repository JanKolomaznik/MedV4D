<?xml version='1.0' encoding='utf-8'?>
<chapter>
<title>Remote computing (CellBE library)</title>

<para>
Library used to send some parts of pipeline to remote mashines to be executed and result sent back. The name is
from Cell Broadband Engine architecture name comming from IBM. This architecture contains also supercomputers
like Blade servers as well as not so huge system like the one in PlayStation3 console. CellBE should originally be the one
that have be target of remote computing because there is some mashines available for testing on faculty.
But This library is not bound to specific architecture. It was one of primary request to be platform indemendet. It
has to eliminate such scenarios that is usual in hospitals: 'Here you have the CT mashine with software that can work
and communicate ONLY with our supercalculating server that is budled with. All for such small price of few milions'.
</para>

<section>
<title>Compilation</title>
	
	<section>
	<title>Dependencies</title>		
		<para>Imaging lib</para>
	</section>

</section>

<section>
<title>Architecture</title>

	<para>
	All declarations are in namespace <code>M4D::CellBE</code>.
	System is classic Client-Server architecture. The client parts is in the library while the server part in
  another project. Purpouse of the library is to be linked with main program that has to have ability of remote
  computing. The both parts have some parts in common that reflects class hierarchy.
	<xref linkend="pic.CellHierarchy"/>
	</para>
	
	<section>
  	<title>Job</title>
  	
  	<para>
  	Job is entity that represents remote computation. Job has 2 main parts: Definig Contatiner and input&amp;output dataSets.
  	Definig Contatiner contains information about filters that the remote pipeline represented by this job will consist of
  	and their settings. Each filter has Properties inner class. Instance of that class give us all neccessary information
  	of that filter because it is teplated as well (it's inner class of templated class) and has all properties of filter
  	that represents. So we don't need to instatiate any filter when defining remote pipeline. Filter::Properties instances
  	are satisfied. According these information is actual pipeline created on ther server side. Input&amp;output dataSets
  	are actual dataContainers that are dataRead from and send to server (input) and recieved and written to (output).
  	When you look at the class hiearchy, you can see there are commons parts for job on client and server side. But both
  	'types' of job has different behaviour when on client side and server side. So 2 branch in hierachy reflects that.
  	Each hierarchy member will be described now in more details:
  	</para>
  	
		<para>
  	<figure float="1" id="pic.CellHierarchy">
  	<title>Hierarchy of classes composing job</title>
  	<mediaobject>
  		<imageobject>
  			<imagedata fileref="figures/cell/hierarchy.eps" format="EPS" scale="21"/>
  		</imageobject>
  		<imageobject>
  		<imagedata fileref="figures/cell/hierarchy.png" format="PNG" scale="21"/>
  		</imageobject>
  	</mediaobject>
  	</figure>
  	</para>

  	<section>
  	<title>BasicSocket</title>
  	<para>
  	Base class containing network functionality. Used BOOST::Asio for asynchronous networking and scatter gather. It contains
  	pointer to socket that all the communication is performed through.
  	</para>
  	</section>
  	
  	<section>
  	<title>ClientSocket</title>
  	<para>
  	Client has to be able to establish connection to server. This class can do it.
  	</para>
  	</section>
  	
  	<section>
  	<title>ClientJob</title>
  	<para>
  	Now we fucus on particular branches of the hierarchy. Lets start with client one.
  	</para>
  	<para>
  	This class advances functionality for special for client job behaviour. That is ID generation,
  	sending definition container and his content. It has also supporting members special for
  	client async operations as well as members that do them.
  	</para>
  	</section>  	
  	
  	<section>
  	<title>ServerJob</title>
  	<para>
  	The last class in Job hierarchy remains. This class form server side brach.
  	</para>
  	<para>
  	Is opposite to ClientJob. It's purpouse is to handle operation that the client job performs
  	(definition container unpacking and building pipeline and creating some supporting structures
  	that are used in re-recieving definition container content. Will be dicused later on)
  	</para>
  	</section>
	
	</section>
	
	<section>
  	<title>Serializers</title>
  	
  	<para>
  	Because this system (or library) is closely related to Imaging library that we wanted to let independent
  	to any other library we have to solve how to perform serialization on the objects from the Imaging
  	library that are mostly templated. Serializers object was developed.
  	</para>
  	<para>
  	Serializer is object that can perform serialization of its content. We have 2 types of serializers. These
  	are FilterSerializers perform Serialization of <classname>Filter::Properties</classname> classes. Used in sending definitioin
  	container. And DataSetSerializers. These performs dataSet serialization. Each Serializer performs serialization
  	of 2 main types. First is class info serialization (CIS). In this stage is template parameters along with class
  	type serialized. These information should be enough for other side for creating appropriate templated class instance.
  	The second serialization tier is for actual content serialization (ACS) of entities (properties for filterProperties, 
  	dataSet atributes	for dataSet).
  	</para>
  	<para>
  	The whole library is closed system that should not be chaged. Only these Serializers are subjects to edit.
  	Serializers reflects hieararchy of objects in Imaging library. So when some new item in Imaging library
  	appears and its author wants it to be able to use it remotely so new serializer has to written and registered.
  	Registering is done in according type of GeneralSerializer, that serves as recognizer of particular serialiers.
  	Details of creating new Serializer will follow later on. Now we will discuss each type of serializer in more
  	details.
  	</para>
	
	  <section>
  	<title>FilterSerializer</title>
  	
  	<para>
  	Each filterSerializer (FS) should be derived from <classname>AbstractFilterSerializer</classname> class which is the base class for every
  	FS and defines interface of its behaviour. CIS is performed by <methodname>SerializeClassInfo</methodname> &amp; <methodname>DeSerializeClassInfo</methodname> pair of
  	member functions. ACS by SerializeProperties &amp; DeSerializeProperties pair.
  	</para>
  	
  	</section>
  	
  	<section>
    	<title>DataSetSerializer</title>
    	
    	<para>
      DataSetSerializer has more work to do than FilterSerializer. It performs CIS (within GeneralDataSetSerializer and
      appropriate switch cases, desribed later) and ACS in <methodname>SerializeProperties</methodname> &amp; <methodname>DeSerializeProperties</methodname> pair of functions
      that are in interface defined by AbstractDataSetSerializer that each new DataSet should inherit.
    	</para>
    	<para>
    	New is Actual Data Serialization (ADS). This is performed through another part of AbstractDataSetSerializer iterface
    	parts: <methodname>Serialize</methodname>, <methodname>OnDataPieceReadRequest</methodname>, <methodname>OnDataSetEndRead</methodname> functions. For more detail of these function purpouse see 
    	appropriate headers. 
    	</para>
    	<para>
    	Main idea of dataSetSerialization is to divide the whole dataSet into smaller parts, that can be
    	transported throug network separately (dataPieces, DP) and alternatively the calculation can be started on independently
    	from other DP that have not yet arrived. Each DP has its header that says how long it is. So on reciving
    	side when such header is recieved its passed to DataSetSerializer's <methodname>OnDataPieceReadRequest</methodname> method that will decide
    	where the data that the DP reffers to are going to be recieved. This can tell through DataBuffs vector by putting DataBuf
    	sctruct into it. DataBuf is struct of void * pointer pointing somewhere into memory and size. So the DataBuffs vector 
    	defines place where data of DP should be transmitted (in geather manner). 
    	</para>
    	<para>
    	Another mandatory function is <methodname>OnDataSetEndRead</methodname>. This is called when whole dataSet is recieved. No more DP are going
    	to be recieved. This is recognized by recieving of special DBHeader. Function can perform some clean up or something.
    	</para>
    	<para>
    	<methodname>Serialize</methodname> is another mandatory function. It has to perform actual whole ADS. It gets pointer to <classname>iPublicJob</classname> interface
    	and through its function <methodname>PutDataPiece</methodname> should perform serialization. PutDataPiece is the same as in deserialization
    	but it writes data into network in scatter manner. In this function the programer should define meaning of DP and
    	reflect the meaning in deserialization functions. Perfect example is serialization of 3d image. DP is one slice. So
    	whole dataSet is sent with slice granularity. On the other side DP (slice) is recieved directly into the right place
    	in big array for 3d image and calculation can be started if another slices not needed. This is ideal case. Current
    	implementation do not allow it due to dataSet locking and lack of universal dataSet handling. So dataSet is currently
    	transferred whole and whole recieved.
    	</para>
    	<para>
    	Because this serialization is statefull the inner state has to be in serializer instance. <methodname>Reset</methodname> mandatory method should
    	reset the state for seralizer reusage.
    	</para>  	
  	</section>  
	
	</section>
	
	<section>
	  <title>CellClient class</title>
	  <para>
	  <classname>CellClient</classname> represent the gate to remote computing. Each job on client side is created throuh this 
	  class by CreateJob function. This class also contains container of available servers that can be used for remote computing.
	  It can also load it from config file. 
	  </para>
	</section>
	
	<section>
  	<title>Remote Filter</title>
  	<para>
  	Remote filter is filter that represents remote pipeline. It shall create definition container that is needed to create
  	Job, that represents remote computation. It shall contain filterProperties, that correnspons to the filter in remote
  	pipeline which compose. Because everything is templated there is not yet no other way of creating remote pipeline
  	than define it through this filter properties, that is members of remote filter (they are some kind hardcoded). That means
  	if you want to create another remote filter with different pipeline within, you have to write new sucessor of 
  	<classname>RemoteFilter</classname>. So every remote filter MUST inherit from <classname>RemoteFilter</classname>. 
  	</para>  	
  	<para>
  	To have hierarchy complete there is <classname>RemoteFilterBase</classname>. This class is ancesstor of <classname>
  	RemoteFilter</classname> and it's purpouse is to make <classname>CellClient</classname> to the sucessors to make job
  	creating possible. 
  	</para>
	</section>
	
	<section>
	  <title>Server</title>
	  
	  <para>
	  Server is whole implemented in asynchronous manner. Base consists <classname>Server</classname>. Main part is <classname>
	  JobManager</classname> that stores all jobs that are currently on the server. It is associative container with JobID key.
	  Only thing that server can do accept connections and read primary header. 
	  </para>
	  
	  <para>
	  When accepts connection, reads <classname>
	  PrimaryHeader</classname> and based on <classname>PrimaryHeader</classname>::action it decides what to do. For action 
	  definitions see BasicJob. Primary action performed by <classname>Server</classname> is job creation. It creates new <classname>
	  ServerJob</classname> instance, adds it to the <classname>JobManager</classname> and then all work is delegate to this job.
	  Then the job recieve other commends (the socket that is created in accept is given to job) and performs appropriate actions.
	  </para>
	  
	  <para>
	  Server can also understand other actions. This is done for case when connection to clint is broken. After reconnect server
	  has to react to all types of action and assotiate recieved request to existing job, give new socket to it and delegate reaction
	  to the existing job.
	  </para>
	  
	  <para>
  	<figure float="2" id="pic.JobLifeCycle">
  	<title>Job life cycle</title>
  	<mediaobject>
  		<imageobject>
  			<imagedata fileref="figures/cell/lifecycle.eps" format="EPS" scale="21"/>
  		</imageobject>
  		<imageobject>
  		<imagedata fileref="figures/cell/lifecycle.png" format="PNG" scale="21"/>
  		</imageobject>
  	</mediaobject>
  	</figure>
  	</para>
  	
  	<para>
  	<figure float="3" id="pic.JobStates">
  	<title>Job states</title>
  	<mediaobject>
  		<imageobject>
  			<imagedata fileref="figures/cell/states.eps" format="EPS" scale="21"/>
  		</imageobject>
  		<imageobject>
  		<imagedata fileref="figures/cell/states.png" format="PNG" scale="21"/>
  		</imageobject>
  	</mediaobject>
  	</figure>
  	</para>
  	
	</section>

</section>

<section>
<title>Usage</title>
  
  <section>  
    <title>FilterSerializer</title>
    <para>
    	Next is the list of neccessary steps for adding new FilterSerializer:
    </para>
    	
  	<itemizedlist>
  		<listitem><para>Add enum FilterID item in cellBE/filterIDEnums.h header </para></listitem>
  		<listitem><para>Write actual FilterSerializer derived from AbstractFilterSerializer and implementing its interface. 
  		Right place where the code to place is cellBE/FilterSerializers folder</para></listitem>
  		<listitem><para>Register new Serializer by adding instance into array in FilterSerializerArray class constructor and appropriate
  		edit size of the array</para></listitem>
  	</itemizedlist>
  	
  	<informalexample>
  	<para>
    	Example of creation of a new FilterSerializer (taken from code. For details see
    	ThresholdingSerializer.h &amp; .tcc). It uses supporting function, that is called righght after	CIS.
  	</para>
  	</informalexample>
  	
  	<programlisting>
<![CDATA[

// supportig templated function, that creates actual instances
template< typename ElementType, unsigned Dim >
void
CreateThresholdingFilter( 
     M4D::Imaging::AbstractPipeFilter **resultingFilter
   , AbstractFilterSerializer **serializer
   , const uint16 id
   , M4D::CellBE::NetStream &s )
{
	typedef typename M4D::Imaging::Image< ElementType, Dim > ImageType;
	typedef typename M4D::Imaging::ThresholdingFilter< ImageType > Filter;
  typedef typename FilterSerializer< Filter > FilterSerializer;

	Filter::Properties *prop = new Filter::Properties();

	*resultingFilter = new Filter( prop );  // filter creation
  *serializer = new FilterSerializer( prop, id);  // appropr. serializer
}

///////////////////////////////////////////////////////////////////////////////

// actual FilterSerializer class

template< typename InputImageType >
class FilterSerializer< M4D::Imaging::ThresholdingFilter< InputImageType > > 
	: public AbstractFilterSerializer
	// inheritance from AbstractFilterSerializer
{
public:
  // typedef to Properties of filter this serializer is for.
  // Just for simplier usage
	typedef typename M4D::Imaging::ThresholdingFilter< InputImageType >
	  ::Properties Properties; 
	
	// ctor - subject of customization, must call typed ancestor ctor
	FilterSerializer( Properties * props, uint16 id) 
		: AbstractFilterSerializer( FID_Thresholding, id )
		, _properties( props ) 
  {}

  // member performing CIS
  void SerializeClassInfo( M4D::CellBE::NetStream &s)
  {
    s << (uint8) ImageTraits< InputImageType >::Dimension;
		s << (uint8) GetNumericTypeID< ImageTraits< InputImageType >
		    ::ElementType >();
  }

  // member performing CIS deserialization
  void
  DeSerializeClassInfo( 
      M4D::Imaging::AbstractPipeFilter **resultingFilter
    , AbstractFilterSerializer **serializer
    , const uint16 id
    , M4D::CellBE::NetStream &s
    )
  {
    uint8 dim;        // read from netStream
		uint8 typeID;      		
		s >> dim;
		s >> typeID;
		
		// build apropriate classes based read info with assistance of
		// CreateThresholdingFilter templated function defined above
		NUMERIC_TYPE_TEMPLATE_SWITCH_MACRO( typeID,
			DIMENSION_TEMPLATE_SWITCH_MACRO( 
        dim, CreateThresholdingFilter<TTYPE, DIM >( 
          resultingFilter, serializer, id, s ) )
		);
  }

  // pair of members performing ACS
	void 
	SerializeProperties( M4D::CellBE::NetStream &s)
	{		
		s << _properties->bottom << _properties->top << _properties->outValue;
	}      
	void
	DeSerializeProperties( M4D::CellBE::NetStream &s )
	{
		s >> _properties->bottom >> _properties->top >> _properties->outValue;
	}	
	
protected:
	Properties	*_properties;   // pointer to properties (actual content)
};
]]>
    </programlisting>
    
    <informalexample>
  	<para>
    	Here is snippet from FilterSerializerArray.cpp constructor where actual registration of a new 
    	FilterSerializers should be performed. <classname>FilterSerializerArray</classname> is based
    	on array of filterSerializers. Each serializer on position defined by it ID in FilterID enum.
  	</para>
  	</informalexample>

  	<programlisting>
<![CDATA[

// within FilterSerializerArray constructor .... 
// creation of buddy instance of our new serializer class on place within
// the array defined by our new enum member (step 1)
m_serializerArray[ (uint32) FID_Thresholding] = 
  new FilterSerializer< typename ThresholdingFilter< Image<uint8, 3> > >( 
    NULL, 0 );

// .....

]]>
   </programlisting> 
  </section>
  
  <section>  
    <title>DataSetSerializer</title>
    
    <para>
  	Next is the list of neccessary steps for adding new DataSetSerializer:
  	</para>
  	
  	<itemizedlist>
			<listitem><para>Add enum DataSetType item in Imaging/dataSetClassEnum.h header </para></listitem>
			<listitem><para>Write actual DataSetSerializer derived from <classname>AbstractDataSetSerializer</classname> and implementing its interface. 
			Right place where the code to place is cellBE/DataSetSerializers folder</para></listitem>
			<listitem><para>Register new dataSetSerializer by adding new switch case of new enum member (step 1) into 
			GeneralDataSetSerializer::GetDataSetSerializer method and writing the content of switch case that instatiates
			DataSetSerializer based on inner properties (like TypeID, Element type,	dimension. Properties of image).
			And another switch case in GeneralDataSetSerializer::DeSerializeDataSetProperties method that on the other side
			can instantate <classname>DataSetSeralizer</classname> class (CIS).</para></listitem>
		</itemizedlist>
		
	    <informalexample>
  	<para>
    	Here is snippet from ImageSerializer. Example of <methodname>SerializeProperties</methodname>
    	 &amp; <methodname>DeSerializeProperties</methodname>	functions. Here used to write information
    	 about dimensionality, element type, sizes, etc. relevant for images.
  	</para>
  	</informalexample>
  	
		<programlisting>
<![CDATA[

template< typename ElementType, uint8 dim>
void
ImageSerializerBase<ElementType, dim>
  ::SerializeProperties(M4D::CellBE::NetStream &s)
{
	AbstractImage *im = (AbstractImage *) m_dataSet; // cast to sucessor

	// serialize common properties
	s << (uint16) im->GetDimension() << (uint16) im->GetElementTypeID();

	for( unsigned i = 0; i < im->GetDimension(); ++i ) {
		const DimensionExtents &dimExtents = im->GetDimensionExtents( i );

		s << (int32)dimExtents.minimum;
		s << (int32)dimExtents.maximum;
		s << (float32)dimExtents.elementExtent;
	}
}

///////////////////////////////////////////////////////////////////////////////

template< typename ElementType, uint8 dim>
M4D::Imaging::AbstractDataSet::ADataSetPtr
ImageSerializerBase<ElementType, dim>
  ::DeSerializeProperties(M4D::CellBE::NetStream &s)
{	
	int32 minimums[ dim ];
	int32 maximums[ dim ];
	float32 elExtents[ dim ];

	for( unsigned i = 0; i < dim; ++i ) {

		s >> minimums[ i ];
		s >> maximums[ i ];
		s >> elExtents[ i ];
	}

	NUMERIC_TYPE_TEMPLATE_SWITCH_MACRO( GetNumericTypeID< ElementType >(),
		return M4D::Imaging::ImageFactory::CreateEmptyImageFromExtents< TTYPE >( dim, minimums, maximums, elExtents )
		);

		// unreachable but for syntactic corectness
	return M4D::Imaging::AbstractDataSet::ADataSetPtr();

}


]]>
	  </programlisting>	
	  
	  <informalexample>
  	<para>
    	Here is a nother snippet from ImageSerializer (3D case). Example of <methodname>Serialize</methodname>
    	 &amp; <methodname>OnDataPieceReadRequest</methodname>	functions. That performs ACS.
    </para>
    <para>
    	 <methodname>Serialize</methodname> goes through image slice by slice and send each as dataPiece through
    	 <classname>iPublicJob</classname>::<methodname>PutDataPiece</methodname>.
    </para>
    <para>
    	 <methodname>OnDataPieceReadRequest</methodname>should decide where to put data piece that is going to be
    	 recieved and corresponds to dataPieceHeader given to this method. Memory places where the data piece
    	 should be recieved to is specified by DataBuff strucutres that is put into bufs container that comes
    	 as well within param. Note state variable m_currSlice that says which slice is going to be recieved.
    	 Such variables are subject of <methodname>Reset</methodname>.
  	</para>
  	</informalexample>
  	
		<programlisting>
<![CDATA[

template< typename ElementType>
void
ImageSerializer< typename ElementType, 3>
  ::Serialize( M4D::CellBE::iPublicJob *job)
{
	Image<ElementType, 3> *im = (Image<ElementType, 3> *) m_dataSet;
	
	uint32 width;
	uint32 height;
	uint32 depth;
	int32 xStride;
	int32 yStride;
	int32 zStride;
	ElementType *pointer = im->GetPointer( 
	                         width, height, depth, xStride, yStride, zStride);

  // put slices as dataPieces. Suppose whole DS is serialized. Not only window part
  DataBuff buff;

  size_t sliceSize = width * height;

	for( uint32 k = 0; k < depth; ++k ) {
    buff.data = (void*) pointer;
    buff.len = sliceSize * sizeof( ElementType);
    job->PutDataPiece( buff);

    pointer += sliceSize; // move on next slice
	}
}

///////////////////////////////////////////////////////////////////////////////

template< typename ElementType>
void
ImageSerializer< typename ElementType, 3>
  ::OnDataPieceReadRequest( DataPieceHeader *header, DataBuffs &bufs)
{
  Image<ElementType, 3> *im = (Image<ElementType, 3> *) m_dataSet;

  uint32 width;
	uint32 height;
	uint32 depth;
	int32 xStride;
	int32 yStride;
	int32 zStride;
	ElementType *pointer = im->GetPointer( width, height, depth, xStride, yStride, zStride );

  size_t sliceSize = width * height;

  DataBuff buf;
  buf.data = pointer + ( sliceSize * m_currSlice);
  buf.len = sliceSize * sizeof( ElementType);

  bufs.push_back( buf);

  m_currSlice++;  // important
}

]]>
	  </programlisting>	
	  
	  <informalexample>
  	<para>
    	Here is example of new dataSet registration in <classname>GeneralDataSetSerializer</classname>.
    	Actual registration is performed by adding another switch case of dataSet type which
    	serializer is being registered.
    </para>
    <para>
    	The same way should be switch case added to <methodname>DeSerializeDataSetProperties</methodname>.
    </para>
  	</informalexample>
  	
		<programlisting>
<![CDATA[

AbstractDataSetSerializer *
GeneralDataSetSerializer::GetDataSetSerializer( AbstractDataSet *dataSet)
{
  switch( dataSet->GetDatasetType() )
  {
  case DATASET_IMAGE:    
    NUMERIC_TYPE_TEMPLATE_SWITCH_MACRO( 
      ((AbstractImage *)dataSet)->GetElementTypeID(),
		  DIMENSION_TEMPLATE_SWITCH_MACRO( 
        ((AbstractImage *)dataSet)->GetDimension(),
			  return new ImageSerializer< TTYPE, DIM >(dataSet) )
		  );
    break;

  case DATASET_TRIANGLE_MESH:
    return NULL;
    // TOBEDONE WHEN triagleMesh created
    break;
   ...
   ...
   
   ...
}

]]>
	  </programlisting>	
	  
	</section>
	
	<section>  
    <title>Remote filter</title>
    
    <para>
  	Next is the list of neccessary steps for writing new remote filter:
  	</para>
  	
  	<itemizedlist>
			<listitem><para>Write new class that inherits from <classname>RemoteFilter</classname> templated class
			and implements all neccesary methodes (PrepareOutputDatasets, constructor)</para></listitem>
			<listitem><para>In that new class should be all Filter options classes that compose the remote
			pipeline added as member variables (hardcoded).</para></listitem>
		</itemizedlist>
		
	  <informalexample>
  	<para>
    	Here is BoneSegmentationRemote filter. It contains thresholding and median filter. (See
    	m_thresholdingOptions and m_medianOptions members). This filter properties offers to the
    	outer world by 'Get' methodes to let them to be changed as well as definition the two
    	mandatory neccesary methodes. There are seme typedef that	make the template madness easier.
  	</para>
  	</informalexample>
  	
		<programlisting>
<![CDATA[

template< typename ImageType >
class BoneSegmentationRemote
  : public RemoteFilter<ImageType, ImageType>
{
public:
	typedef typename RemoteFilter<ImageType, ImageType> PredecessorType;
	typedef PredecessorType::Properties	Properties;

	BoneSegmentationRemote();
  

	/////////////////// To customize /////////////////////
	// puting options available to outer world to be able to specify it ....

  // thresholding filter issues
	typedef ThresholdingFilter<ImageType>	Thresholding;
	typedef typename Thresholding::Properties ThresholdingOptsType;
	
	ThresholdingOptsType *GetThreshholdingOptions( void)	
  {
		return &m_thresholdingOptions;
	}

  // median filter issues
  typedef MedianFilter2D<ImageType>	Median;
	typedef typename Median::Properties MedianOptsType;
	
	MedianOptsType *GetMedianOptions( void)	
  {
		return &m_medianOptions;
	}

protected:
	void PrepareOutputDatasets();

private:

	/**
	 * Here should be added members of  filter options type that will
	 * define the remote pipeline this filter represents. Each member
	 * for single filter in remote pipeline. As a next step is defining
	 * retrieving public members, that will provide ability to change
	 * the filter options from outer world.
	 **/
	ThresholdingOptsType m_thresholdingOptions;
  MedianOptsType m_medianOptions;
	// ...

};

]]>
	  </programlisting>	
	  
	  <informalexample>
  	<para>
    	Here is implementation of BoneSegmentationRemote constructor. This way will be implemented
    	all remote filters constructors. There are two phases. The first: creation of defining
    	container (vector of FilterSerializers) and putting Serializers that correspond to filter
    	properties member variales into it. The second stage is creating job while passing that
    	defining container.
  	</para>
  	</informalexample>
  	
		<programlisting>
<![CDATA[

template< typename ImageType>
BoneSegmentationRemote<ImageType>::BoneSegmentationRemote()
: PredecessorType( new Properties() )
{
  AbstractFilterSerializer *ser;  

  // definig vector that will define actual remote pipeline
  FilterSerializerVector m_filterSerializers;

  uint16 filterID = 1;

  // put into the vector serializers instances in order that is in remote pipe
  {
    // insert thresholding serializer
    ser = GeneralFilterSerializer::GetFilterSerializer<Thresholding>( 
      &m_thresholdingOptions, filterID++);
    m_filterSerializers.push_back( ser);

    // insert median serializer
    ser = GeneralFilterSerializer::GetFilterSerializer<Median>( 
      &m_medianOptions, filterID++);
    m_filterSerializers.push_back( ser);
  
    // ... for other possible members definig remote pipe filters
  }

  // create job
  m_job = s_cellClient.CreateJob( m_filterSerializers);
}

]]>
	  </programlisting>	
	  	  
	</section>
	
</section>

</chapter>
