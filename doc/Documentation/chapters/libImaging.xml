<?xml version='1.0' encoding='utf-8'?>
<chapter>
<title>Library Imaging</title>

	<para>
	Main goal of this library is effective implementation of pipeline computation on input datasets. 
	Whole computation should be as parallel as possible in order to utilize resources available in modern processors, etc. 
	</para>
	
	<para>
	Design of interfaces and class hierarchies is aimed to extensibility and code reusability.
	</para>


<section>
<title>Compilation</title>
	
	<section>
	<title>Dependencies</title>
		
		<para>This library should be linked together with libCommon. So all its dependencies come with it.</para>
	</section>

</section>

<section>
<title>Architecture</title>

	<para>
	All declarations are in namespace <code>M4D::Imaging</code>.
	</para>

	<para>
	Data structures in library are designed to make possible construction of pipeline computation system as shown 
	in scheme <xref linkend="pic.PipelineScheme"/>. We now present all types of these data structures and their tasks.
	</para>

	<para>
	<itemizedlist>
		<listitem><formalpara><title>Datasets</title>
			<para>Centre of whole design - hierarchy of classes prepared for storing data, which provide methods for
			access synchronization over data.</para>
		</formalpara></listitem>
		
		<listitem><formalpara><title>Filters</title>
			<para>Are objects planned as processors working on datasets. Only implmented branch of filters are pipeline filters. 
			They get access to input datasets through input ports, do the computation and write results to output datasets obtained 
			from output ports.</para>
		</formalpara></listitem>
		
		<listitem><formalpara><title>Ports</title>
			<para>Communication channels - their job is exactly as the name sais. Filters can get access to input/output datasets and 
			receive messages through ports.</para>
		</formalpara></listitem>
		
		<listitem><formalpara><title>Connections</title>
			<para>Connection objects are meant as bridge between objects with ports (filter-filter, filter-viewer).
			They own datasets and grant access to them through ports. Input ports have only read access and output ports 
			have write access. Connection object oversee synchronization of readers and writer.  Model is one-to-many, so there can be 
			multiple readers, but only one writer.
			</para>
		</formalpara></listitem>
	
		<listitem><formalpara><title>Messages and message receivers</title>
			<para>Communications between objects in pipeline is assured by sending messages - successors of <classname>PipelineMessage</classname>.
			Objects which can receive messages have to implement interface <classname>MessageReceiver</classname> (ports, filters, etc.), there are 
			also other interfaces - but this one is most important. If you make object with this interface, you can add message hook to connection object 
			by calling <methodname>AddMessageHook()</methodname>. Till this moment your object will obtain every message going through this particular 
			connection object - handy for imlementation of notifiers, progress watchers, etc.
			</para>
		</formalpara></listitem>
	</itemizedlist>
	</para>	

	<para>
	<figure float="1" id="pic.PipelineScheme">
	<title>Pipeline scheme</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="figures/libImaging/PipelineScheme.eps" format="EPS" scale="21"/>
		</imageobject>
		<imageobject>
			<imagedata fileref="figures/libImaging/PipelineScheme.png" format="PNG" scale="21"/>
		</imageobject>
	</mediaobject>
	</figure>
	</para>

	<section>
	<title>Datasets</title>
	
		<para>
			Actual data are stored in proper descendants of class <classname>AbstractDataSet</classname>. Its hierarchy is shown in <xref linkend="pic.DataSetHierarchy"/><!--TODO -->. Purpose of these 
		classes is to provide access methods for reading and writing informations of certain type and optional synchronization. 
		</para>

		<para>
		By optional synchronization is meant set of synchronization methods, which are not called by access methods in class. And user should
		use these methods only in situations requiring synchronization. This less comfortable though, but more effective.
		</para>

	</section>

	<section>
	<title>Filters</title>
		<para>So now we know how to store data. Now we describe filters - data processors.
			In filter class hierarchy we count with future development of different kinds of filters, but at the moment only 
			implemented group are pipeline filters. So further in text, when we say filter, we mean pipeline filter.
		</para>

		<para>
			As pipeline filter is meant data processor, which takes its inputs and after a set of computations writes results to 
			output(s) with constrain that input and output must differ. Specialy in our case input/output data are stored in datasets and 
			filter cannot process data in place - output datasets must differ from input datasets.
		</para>

		<para>
			As noted earlier, filters can have more than one input and more than one output. Communication with surroundings is provided through
			ports - they give access to input/output datasets, have interface for synchronization, message communication, etc.
		</para>

		<para>
			All properties of filter are stored in one structure - designed as inner structure with name <classname>Properties</classname>.
		</para>
	</section>

	<section>
	<title>Ports</title>
		
	<para>Ports provide communication interface for filters (or other objects - like viewers) living in pipeline. Ports are either input or output and cannot be 
		exchanged. 
	</para>
	<para>Input ports give readonly access to datasets and output give full access to datasets. Ports are stored in <classname>InputPortList</classname>
		respective  <classname>OutputPortList</classname>. These container provide access to ports through their ID - index in container. In addition these containers 
		can send message through all ports at once.
	</para>

	<para>
		Usage of all ports isn't mandatory. For example one can design filter, which can have multiple different output formats, but only one at the moment according 
		to its settings. For each format there can be special port and filter send data only to propriete one.
	</para>

	</section>

	<section>
	<title>Connections</title>
		
	<para>Connections answer the question, where ports get access to datasets. Connection objects work like bridge between ports. There can be only one output port (writer) connected to 
		one connection object, but multiple input ports (readers). They all share access to dataset maintained by connection object.
	</para>

	<para>Connection are designed even as inputs and outputs to whole pipeline. You can tell constructor of connection object to not create dataset. You can than pass 
		your own dataset (but of apropriete type) to connection. And if there is no writer its your input gateway to pipeline. On the other side, if there is no 
		readers you have output gateway.
	</para>

	<para>To connection objects can be assigned message listener. Its object which can read messages going through connection. This can be used for implementation of 
		progress bars, notifiers and for advanced control of a pipeline or even for synchronization of multiple pipelines.	
	</para>

	</section>

</section>
<section>
	<title>Main classes</title>

	<para>
		In this section we are going to introduce most important classes.
		We will go through each group and list them with brief characteristics. 
	</para>

	<section>
	<title>Dataset hierarchy</title>
	
		<para>
		<figure float="1" id="pic.DataSetHierarchy">
		<title>Filter hierarchy</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/DataSetHierarchy.eps" format="EPS" scale="75"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/DataSetHierarchy.png" format="PNG" scale="75"/>
			</imageobject>
		</mediaobject>
		</figure>
		</para>

		<formalpara><title><classname>AbstractDataSet</classname></title> 
		<para>Is predecessor of all datastructures containing data. Only concept implemented by this class is read/write locking system. 
		This locking system ensure synchronization only on dataset structure (its extents, allocated buffers, etc.), not on data contained 
		inside. Read/write lock let multiple readers to obtain access and writers have to wait. If there is at least one writer waiting, no 
		other reader is allowed to obtain lock. And when all readers finish their work, first writer get exclusive access. Synchronization 
		on data should be implemented in successors, because it differ in each type of dataset. Changes in internal structure can be detected 
		by comparing timestamps. When some change in internal structure of dataset has happened - timestamp is increased. So if you store value from 
		previous access you can easily detect changes.
		</para></formalpara>

		<formalpara><title><classname>AbstractImage</classname></title> 
		<para> Abstract ancestor of image classes. Has access methods to information about image - dimension, type of elements and proportions.
		These informations can be used for casting to right type of image or for generic programming.
		</para></formalpara>

		<formalpara><title><classname>AbstractImageDim&lt;Dimension&gt;</classname></title> 
		<para>Templated class with specializations for each dimension - now has no special purpose, but in future some 
		methods from Image classes will be moved here.
		</para></formalpara>

		<formalpara><title><classname>Image&lt;ElementType, Dimension&gt;</classname></title> 
		<para> Templated class made for storing raster image data of certain type. 
		It has specialization for each used dimension.
		It contains buffer with data, which can be shared among different images - for example 
		2D image can share one slice from 3D image. But now this sharing concept isn't finished. And will be available in
		future versions. 
		Sharing is possible because locking is done on buffer and this class has only wrapper methods for locking.
		</para></formalpara>
	</section>

	<section>
	<title>Filter hierarchy</title>
		
		<para>
		<figure float="1" id="pic.FilterHierarchy">
		<title>Filter hierarchy</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/FilterHierarchy.eps" format="EPS" scale="75"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/FilterHierarchy.png" format="PNG" scale="75"/>
			</imageobject>
		</mediaobject>
		</figure>
		</para>

		<formalpara><title><classname>AbstractPipeFilter</classname></title><para>
		Ancestor of pipeline filters. Public interface is extended with few methods modifiing
		behaviour (ie. setting invocation style) and access methods to input ports and output ports.
		These ports are comunication channels - can send and receive messages, get access to datasets, etc.
		</para></formalpara><para>
		In nonpublic interface there are declared pure virtual and virtual methods with special purpose - they are
		called in predefined situations or in right order during computation. 
		If somebody wants to create new pipeline filter, he must at least inherit its implementation from this class and
		override these methods : <methodname>ExecutionThreadMethod()</methodname>, <methodname>PrepareOutputDatasets()</methodname>, 
		<methodname>BeforeComputation()</methodname>, <methodname>AfterComputation()</methodname>.
		</para>

		<formalpara><title><classname>AbstractImageFilter</classname></title><para>
		Filter base for one way image filters - it implements basic task like reading timestamps, deciding what type of computation use, etc.
		If somebody wants to create new pipeline filter, he must at least inherit its implementation from this class and
		override these methods : <methodname>ExecutionThreadMethod()</methodname>, <methodname>PrepareOutputDatasets()</methodname>, 
		<methodname>BeforeComputation()</methodname>, <methodname>AfterComputation()</methodname>.
		</para></formalpara>

		<formalpara><title><classname>AbstractImageSliceFilter</classname></title><para>
		Predecessor of filters computing in layers with limited neighbourhood (convolution, range filters, etc.).
		</para></formalpara>

		<formalpara><title><classname>AbstractImage2DFilter</classname></title><para>
		This template is planned to be used as predecessor for filters procesing on two dimensional data.
		By that are meant 2D images and 3D images processed in slices. 
		Output dataset proportions are set to the same values as input dataset, so only method to be overrided
		is <methodname>Process2D()</methodname>.
		</para></formalpara>
		
		<formalpara><title><classname>AbstractImageElementFilter</classname></title><para>
		This template is prepared to ease design of image filters, which work on zero neighbourhood of element 
		- use only value of the element.
		These filters work with output dataset with same extents as input. 
		</para></formalpara><para>
		Because calling virtual method consumes time - this template uses different way of implementation of
		actual computation - third parameter of template is functor which has implemented operator(), which takes 
		two parameters - constant reference to input value, and reference to output value. This method is best to be inline and 
		effective - its called on every element of input dataset.
		</para>

		<formalpara><title><classname>AbstractImage2DFilter</classname></title><para>
		This template is planned to be used as predecessor for filters procesing on two dimensional data.
		By that are meant 2D images and 3D images processed in slices. 
		Output dataset proportions are set to the same values as input dataset, so only method to be overrided
		is <methodname>Process2D()</methodname>.
		</para></formalpara>

		<formalpara><title><classname>AbstractImageFilterWholeAtOnce</classname></title><para>
		This template is prepared for creation of image filters which need to access whole input dataset
		or for experimental implementation - without progressive computing. 
		</para></formalpara><para>
		Before call of <methodname>ProcessImage()</methodname> filter waits on read bounding box with same proportion as image and after
		that write bounding box containing output image is marked as dirty. After finished computation is this bounding box
		marked as modified or cancelled if computation did not finished successfuly - <methodname>ProcessImage()</methodname> returned false.
		</para><para>
		In classes inheriting from this one you must override methods <methodname>ProcessImage()</methodname> and <methodname>PrepareOutputDatasets()</methodname>.
		</para>

		<formalpara><title><classname>AbstractImageFilterWholeAtOnceIExtents</classname></title><para>
		Same usage as template <classname>AbstractImageFilterWholeAtOnce</classname>, but only when input and output image are the same dimension 
		and proportions.
		</para></formalpara><para>
		So only method you must override is <methodname>ProcessImage()</methodname>.
		</para>

		<formalpara><title><classname>ImageConvertor</classname></title><para>
		Because all parts of pipeline are strictly typed, we can only process images of certain type. But in reality user can open any kind of image. And here
		comes work for <classname>ImageConvertor</classname>, which can convert generic images to desired type (template parameter). So usualy we put this filter
		as the first in pipeline.		
		</para></formalpara>

	</section>

	<section>
	<title>Port and connection hierarchy</title>

	<para>
		We will not list port and connection classes here, because they are similar to each other and only difference is in their specialization to certain types 
		of dataset. There can be less classes, but this system provide us better type control in compile time.
	</para>

		<para>
		<figure float="1" id="pic.PortsHierarchy">
		<title>Port hierarchy</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/PortsHierarchy.eps" format="EPS" scale="75"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/PortsHierarchy.png" format="PNG" scale="75"/>
			</imageobject>
		</mediaobject>
		</figure>
		</para>

		<para>
		<figure float="1" id="pic.ConnectionHierarchy">
		<title>Connection hierarchy</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ConnectionHierarchy.eps" format="EPS" scale="75"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ConnectionHierarchy.png" format="PNG" scale="75"/>
			</imageobject>
		</mediaobject>
		</figure>
		</para>
	</section>

</section>


<section>
	<title>Main design concepts</title>

	<para>
	</para>

	<section>
	<title>Filter execution</title>

	<para>
	Execution of filter is complex process. It can be modified by overriding prepared virtual methods. Each of them has exact purpose and changing it can cause 
	problems - so be sure what you are doing. These methods are marked gray in <xref linkend="pic.ExecutionScheme"/>. We now list them and desribe their function.
	</para>

		<figure float="1" id="pic.ExecutionScheme">
		<title>Execution scheme</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ExecutionScheme.eps" format="EPS" scale="40"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ExecutionScheme.png" format="PNG" scale="40"/>
			</imageobject>
		</mediaobject>
		</figure>

		<para><itemizedlist>
			<listitem><para>
					<methodname>CheckProperties()</methodname>. Its actualy method from struct <classname>Properties</classname>, its purpose is to check
					if all properties are set to valid values, etc. 
					</para>
					
					<para>If you override this method call predeccessor implementation first in your 
						implmentation.
			</para></listitem>

			<listitem><para>
					<methodname>BeforeComputation()</methodname>. This method do all preparations before actual computation. First thing it has to 
					decide if the computation will be only update of modification or recalculation of whole data (new dataset, properties changed, ect.). 
					Next task is to call <methodname>PrepareOutputDatasets()</methodname> if needed - output input was resized, change in properties, etc.
					When everything is prepared do marking of output parts, which will be modified.
					</para>
					
					<para>If you override this method call predeccessor implementation first in your 
						implementation.
			</para></listitem>
			<listitem><para>
					<methodname>PrepareOutputDatasets()</methodname>. It has to prepare (resize) output datasets according to inputs and filter properties. 
					Its called only when needed.
					</para>
					
					<para>If you override this method call predeccessor implementation first in your 
						implementation.
			</para></listitem>
			<listitem><para>
					<methodname>ExecutionThreadMethod()</methodname>. Actual computation method - in successor classes often overriden to call some pure 
					virtual methods with special interface to make computation easier.
			</para></listitem>
			<listitem><para>
					<methodname>AfterComputation()</methodname>. This method should unlock parts of image which remained locked after unsuccesful 
					computation. Another task which is often done here is saving of timestamps - from input/output datasets, properties, etc.
					</para>
					
					<para>If you override this method call predeccessor implementation first in your 
						implementation.
			</para></listitem>
		</itemizedlist></para>


	</section>

	<section>
	<title>Locking image parts</title>

		<para>
		Image locking was designed to be fast and powerful enought to fulfill our needs. Locks our optional, so if some object (ie. viewer) doesn't 
		need synchronization he can ignore locking.	
		</para>
		<para>
		Locking is done by marking certain parts of image as <constant>DIRTY</constant> these parts can be only axis aligned bounding hyperboxes. If filter plans to 
		do computation on some part of image he marks this part as <constant>DIRTY</constant> and when he finishes succesfuly he mark it as <constant>MODIFIED</constant>, 
		if he finishes unsuccessfuly he marks it as <constant>CANCELLED</constant>. For this purposes is prepared class <classname>WriterBBoxInterface</classname>, which
		stands for image part.
		</para>

		<para>
			If somebody wants to read some part of image and wants to be sure that nobody's making modification to this part, he uses 
			<classname>ReaderBBoxInterface</classname>. Its class similar to <classname>WriterBBoxInterface</classname>, but its state depends on state of incident
			writer bounding boxes. As shown in <xref linkend="pic.ImageLocking"/> - reader bounding box will remain <constant>DIRTY</constant> until all incident writer
			bboxes are marked modified or at least one <constant>CANCELLED</constant>.
		</para>
	
			
		
		<para>
		<figure float="1" id="pic.ImageLocking">
		<title>Synchronization over image data - 2D example</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ImageLocking.eps" format="EPS" scale="30"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="figures/libImaging/ImageLocking.png" format="PNG" scale="30"/>
			</imageobject>
		</mediaobject>
		</figure>
		</para>

	</section>

	<section>
	<title>Timestamps</title>

		<para>
		Very often we need to detect if something changed during time or which change is older. Thats why we have class <classname>TimeStamp</classname>.
		</para>
		<para>
		Its simple class, it has inside two big integers - one is ID of timestamp and second is actual "time". In addition we have inside mutex for 
		access synchronization. This class has predefined <methodname>operator&lt;()</methodname> so two instance can be easily compared which is older.
		This has defined result only for two timestamps with same ID. Different objects have timestamps with different ID.
		</para>
	</section>

</section>

<section>
<title>Usage</title>

	<section>
	<title>How to build a pipeline</title>
	
		<para>
		First thing we should know, is how to create filtering pipeline with supposed behaviour using prepared filters. 
		This section will be brief tutorial to pipeline construction. We show possible usage on example class that will have all desired
		abilities normaly distributed across application.
		</para>

		<para>
		Before we start construction, we must decide if we want handle storing and deallocation of all objects. There is 
		prepared container for all pipeline objects, which can handle deallocation of stored objects and semiautomatically connects filters, and 
		other objects with ports used as communication channel. For our example we use this <classname>PipelineContainer</classname>.
		For manual control and construction see its source code.
		</para>

		<programlisting><![CDATA[
#include "Imaging/Image.h"
#include "Imaging/PipelineContainer.h"

const unsigned Dim = 3
typedef uint16 ElementType;

typedef M4D::Imaging::Image< ElementType, Dim > ImageType;

class Notifier : public MessageReceiverInterface
{

public:
    void
    ReceiveMessage( 
        M4D::Imaging::PipelineMessage::Ptr             msg, 
        M4D::Imaging::PipelineMessage::MessageSendStyle     sendStyle, 
        M4D::Imaging::FlowDirection                direction
        )
    {
        if( msg->msgID == M4D::Imaging::PMI_FILTER_UPDATED ) {
            //DO NOTIFICATION - Put your code here
        }
    }


};

class ExamplePipelineHandler
{
public:
    //Default constructor - pipeline construction
    ExamplePipelineHandler();

    //Method which pass image to pipeline and start computation.
    void
    FilterImage( ImageType::Ptr image );

protected:
    M4D::Imaging::PipelineContainer   _pipeline;
    M4D::Imaging::AbstractPipeFilter  *_firstFilter;
    M4D::Imaging::AbstractImageConnectionInterface  *_inConnection;
    M4D::Imaging::AbstractImageConnectionInterface  *_outConnection;
};
]]>
		</programlisting>

		<para>
		Actual pipeline construction should proceed in three basic steps:
		</para>

		<itemizedlist>
			<listitem><para>Allocation of filters. Normal allocation of objects. We construct desired filters and add them to pipeline.</para>
				<para>We set filter properties. And if you want some filter to be executed by pipeline message and not manual calling of 
				<methodname>Execute</methodname> method you must call method <methodname>SetUpdateInvocationStyle()</methodname>
				as in example.
			</para>
			</listitem>
			<listitem><para>Establishing connections. When we have allocated filters, we must connect them in pipeline. Pipeline container has methods for this
			- see example implementation.</para></listitem>
			<listitem><para>Setting message hooks. Special part are message listeners</para></listitem>
		</itemizedlist>


		<programlisting><![CDATA[
#include "ExamplePipelineHandler.h"

ExamplePipelineHandler
::ExamplePipelineHandler()
{
    _firstFilter = new FIRST_FILTER_TYPE();
    M4D::Imaging::AbstractPipeFilter *secondFilter = new FIRST_FILTER_TYPE();


    // IMPORTANT !!!! if you want next filter to be executed automatically.
    secondFilter->SetUpdateInvocationStyle( AbstractPipeFilter::UIS_ON_CHANGE_BEGIN );

    _pipeline.AddFilter( _firstFilter );
    _pipeline.AddFilter( secondFilter );

    _pipeline.MakeConnection( _firstFilter, 0, secondFilter, 0, true );

    _inConnection = 
        dynamic_cast< M4D::Imaging::AbstractImageConnectionInterface * >(
             &(_pipeline.MakeInputConnection( _firstFilter, 0, false )) );

    _outConnection = 
        dynamic_cast< M4D::Imaging::AbstractImageConnectionInterface * >(
        &(_pipeline.MakeOutputConnection( secondFilter, 0, true )) );

    //Adding message listener
    _outConnection->SetMessageHook( MessageReceiverInterface::Ptr( new Notifier() ) );
}


void
ExamplePipelineHandler
::FilterImage( ImageType::Ptr image )
{
    _inConnection->PutImage( image );

    _firstFilter->Execute();
}
]]>
		</programlisting>

	</section>

	<section>
	<title>Creating new filter</title>
		
		<para>
		One of the main advantage of this library is its extensibility. The biggest potential is easy way to add new filters 
		with all features promised by pipeline design (synchronization, parallel execution, etc.). This is achieved through 
		set of filter abstract classes, each designed for special purpose. Author of new filter have to consider few aspects 
		(dimensionality, type of input/output data, way the filter computes, etc.) and choose right ancestor class for his filter.
		</para>

		<para>
		To make decision easier you can use prepared flowchart <xref linkend="pic.MostSuitableFilterFlowchart"/> and find most suitable ancestor class.
		</para>
		
		<figure float="1" id="pic.MostSuitableFilterFlowchart">
		<title>Filter decisive flowchart</title>
		<mediaobject>
			<imageobject><imagedata fileref="figures/libImaging/MostSuitableFilterFlowchart.eps" format="EPS" scale="65"/></imageobject>
			<imageobject><imagedata fileref="figures/libImaging/MostSuitableFilterFlowchart.png" format="PNG" scale="65"/></imageobject>
		</mediaobject>
		</figure>

		<para>
		Now if you have chosen right ancestor class, you can start with actual implementation of your filter. You should keep few rules and concepts, which 
		can not only help you with writing, but even some other parts of library will just work without handling extra issues. This is achieved by generic 
		design of whole library, templates are used almost everywhere.
		</para>
		
		<para>
		We introduce these rules and concepts, and show practical examples from library sources. First of all try design your filters as generic as possible.
		So try maximally use dataset traits (now only available <classname>ImageTraits</classname>), template specialializations, etc.
		All ancestor classes are templated (with exception of <classname>AbstractPipeFilter</classname>), so it makes that easier.
		</para>

		<para>
		Try to keep these rules, when designing filter interface:
		</para>
		<itemizedlist>
			<listitem><para>
			Filter class has public typedef to predecessor class with name <classname>PredecessorType</classname>.
			</para></listitem>
			
			<listitem><para>
			All properties of filter are in one public nested <classname>struct Properties</classname> deriving from <classname>PredecessorType::Properties</classname>.
			In case, that set of properties is empty, make at least public typedef to <classname>PredecessorType::Properties</classname> with name Properties.	
			</para></listitem>

			<listitem><para>
			Prepare default constructor, and constructor with pointer to <classname>Properties</classname>. Default constructor creates default set of properties.
			In both constructors pointer to instance of <classname>Properties</classname> is passed to predecessor constructor in list of initializers.
			Using constructor with parameter will completely initialize filter with passed properties, no other method is needed to call.
			</para></listitem>
			
		</itemizedlist>

		<para>
		If you follow mentioned rules you can use few preprocessor macros, which can simplify implementation of your class.
		
		<itemizedlist>
			<listitem><para>
			Pointer to <classname>Properties</classname> structure is stored as protected member <structfield>_properties</structfield>, but its type is 
			<classname>AbstractFilter::Properties</classname>. So if you want access members of your properties structure you must either 
			cast to right type every time, or put preprocessor macro <function>GET_PROPERTIES_DEFINITION_MACRO</function> to private section of your
			class declaration. Now method <function>GetProperties()</function> returning reference to <classname>Properties</classname> is available for
			usage.
			</para></listitem>
			
			<listitem><para>
			To make declaration of Get/Set methods easier three macros are prepared: <function>GET_PROPERTY_METHOD_MACRO( TYPE, NAME, MEMBER_NAME )</function>, 
			<function>SET_PROPERTY_METHOD_MACRO( TYPE, NAME, MEMBER_NAME )</function> and <function>GET_SET_PROPERTY_METHOD_MACRO( TYPE, NAME, MEMBER_NAME )</function>.
			These macros will be unwinded into inline declarations of <function>TYPE Get'NAME'()const</function>, <function>void Set'NAME'( TYPE value )</function> and both.
			Parameter <parameter>NAME</parameter> is used in name of Get/Set method and parameter <parameter>MEMBER_NAME</parameter> is name of <classname>Properties</classname> member 
			accessed by these two methods.
			</para></listitem>

		</itemizedlist>

		</para>

		<para>Here we show implementation of thresholding filter. Its simple class - inheriting from <classname>AbstractImageElementFilter</classname>. It uses 
			<classname>ThresholdingFunctor</classname> and call it to each element of input image. 
		</para>
		<para>
			Only notable hack, which is used in this example is how to pass thresholding parameters to functor - we use method 
			<methodname>CheckProperties()</methodname> which is called before computation starts.
		</para>
		<programlisting><![CDATA[
template< typename ElementType >
class ThresholdingFunctor
{
public:
    void
    operator()( const ElementType&    input, ElementType& output )
    {
        if( input < bottom || input > top ) {
            output = outValue;
        } else {
            output = input;
        }
    }    

    ElementType    bottom;    
    ElementType    top;
        
    ElementType    outValue;
};

template< typename ImageType >
class ThresholdingFilter
: public AbstractImageElementFilter< 
    ImageType, 
    ImageType,
    ThresholdingFunctor< typename ImageTraits< ImageType >::ElementType > 
    >
{
public:
    typedef ThresholdingFunctor
        < typename ImageTraits< ImageType >::ElementType >     Functor;
    
    typedef Imaging::AbstractImageElementFilter
        < ImageType, ImageType, Functor >                      PredecessorType;

    typedef typename ImageTraits< ImageType >::ElementType     InputElementType;

    struct Properties : public PredecessorType::Properties
    {
        Properties(): bottom( 0 ), top( 0 ), outValue( 0 ) {}

        InputElementType    bottom;    
        InputElementType    top;
        
        InputElementType    outValue;

        void
        CheckProperties() {
            _functor->bottom = bottom;
            _functor->top = top;
            _functor->outValue = outValue;
        }
        
        Functor    *_functor;
    };

    ThresholdingFilter( Properties  * prop );
    ThresholdingFilter();

    GET_SET_PROPERTY_METHOD_MACRO( InputElementType, Bottom, bottom );
    GET_SET_PROPERTY_METHOD_MACRO( InputElementType, Top, top );
    GET_SET_PROPERTY_METHOD_MACRO( InputElementType, OutValue, outValue );
protected:

private:
    GET_PROPERTIES_DEFINITION_MACRO;

};

template< typename ImageType >
ThresholdingFilter< ImageType >
::ThresholdingFilter() 
    : PredecessorType( new Properties() )
{
    GetProperties()._functor = &(this->_elementFilter);
}

template< typename ImageType >
ThresholdingFilter< ImageType >
::ThresholdingFilter( typename ThresholdingFilter< ImageType >::Properties *prop ) 
    : PredecessorType( prop )
{
    GetProperties()._functor = &(this->_elementFilter);    
}
]]>
		</programlisting>

	</section>

	<section>
		<title>Defining new dataset type</title>
		<para>
			This area is planned for future development - some concepts are planned to be introduced to make this as easy as possible. 
			But main steps are clear now :
		</para>
		<itemizedlist>
			<listitem><para>Designing dataset interfaces and synchronization system. Use prepared abstract classes.</para></listitem>
			<listitem><para>Implementing connection objects and input/output ports. Needed for interaction with pipeline.</para></listitem>
			<listitem><para>Creating filter base classes working on this dataset type. To make it easier for users.</para></listitem>
		</itemizedlist>

	</section>
</section>

</chapter>
